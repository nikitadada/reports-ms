// Code generated by MockGen. DO NOT EDIT.
// Source: code.citik.ru/back/report-action/internal (interfaces: ReportRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	internal "code.citik.ru/back/report-action/internal"
	gomock "github.com/golang/mock/gomock"
)

// MockReportRepository is a mock of ReportRepository interface.
type MockReportRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReportRepositoryMockRecorder
}

// MockReportRepositoryMockRecorder is the mock recorder for MockReportRepository.
type MockReportRepositoryMockRecorder struct {
	mock *MockReportRepository
}

// NewMockReportRepository creates a new mock instance.
func NewMockReportRepository(ctrl *gomock.Controller) *MockReportRepository {
	mock := &MockReportRepository{ctrl: ctrl}
	mock.recorder = &MockReportRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportRepository) EXPECT() *MockReportRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReportRepository) Create(arg0 context.Context, arg1 *internal.Report) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockReportRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReportRepository)(nil).Create), arg0, arg1)
}

// Filter mocks base method.
func (m *MockReportRepository) Filter(arg0 context.Context, arg1 *internal.Filter) ([]*internal.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0, arg1)
	ret0, _ := ret[0].([]*internal.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockReportRepositoryMockRecorder) Filter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockReportRepository)(nil).Filter), arg0, arg1)
}

// Get mocks base method.
func (m *MockReportRepository) Get(arg0 context.Context, arg1 internal.ReportId) (*internal.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*internal.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReportRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReportRepository)(nil).Get), arg0, arg1)
}

// Update mocks base method.
func (m *MockReportRepository) Update(arg0 context.Context, arg1 internal.ReportId, arg2 string, arg3 int64, arg4 internal.ReportStatus, arg5 internal.ReportType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReportRepositoryMockRecorder) Update(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReportRepository)(nil).Update), arg0, arg1, arg2, arg3, arg4, arg5)
}
