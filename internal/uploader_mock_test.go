// Code generated by MockGen. DO NOT EDIT.
// Source: uploader.go

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileUploader is a mock of FileUploader interface.
type MockFileUploader struct {
	ctrl     *gomock.Controller
	recorder *MockFileUploaderMockRecorder
}

// MockFileUploaderMockRecorder is the mock recorder for MockFileUploader.
type MockFileUploaderMockRecorder struct {
	mock *MockFileUploader
}

// NewMockFileUploader creates a new mock instance.
func NewMockFileUploader(ctrl *gomock.Controller) *MockFileUploader {
	mock := &MockFileUploader{ctrl: ctrl}
	mock.recorder = &MockFileUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileUploader) EXPECT() *MockFileUploaderMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockFileUploader) Upload(ctx context.Context, reader io.Reader, reportId ReportId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, reader, reportId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockFileUploaderMockRecorder) Upload(ctx, reader, reportId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockFileUploader)(nil).Upload), ctx, reader, reportId)
}
