// Code generated by MockGen. DO NOT EDIT.
// Source: bonus.go

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockBonusStorage is a mock of BonusStorage interface.
type MockBonusStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBonusStorageMockRecorder
}

// MockBonusStorageMockRecorder is the mock recorder for MockBonusStorage.
type MockBonusStorageMockRecorder struct {
	mock *MockBonusStorage
}

// NewMockBonusStorage creates a new mock instance.
func NewMockBonusStorage(ctrl *gomock.Controller) *MockBonusStorage {
	mock := &MockBonusStorage{ctrl: ctrl}
	mock.recorder = &MockBonusStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBonusStorage) EXPECT() *MockBonusStorageMockRecorder {
	return m.recorder
}

// FindDetailed mocks base method.
func (m *MockBonusStorage) FindDetailed(ctx context.Context, actionNumber string, ActionStartTime time.Time) (<-chan *BonusDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDetailed", ctx, actionNumber, ActionStartTime)
	ret0, _ := ret[0].(<-chan *BonusDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDetailed indicates an expected call of FindDetailed.
func (mr *MockBonusStorageMockRecorder) FindDetailed(ctx, actionNumber, ActionStartTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDetailed", reflect.TypeOf((*MockBonusStorage)(nil).FindDetailed), ctx, actionNumber, ActionStartTime)
}

// FindGeneral mocks base method.
func (m *MockBonusStorage) FindGeneral(ctx context.Context, actionNumber string, ActionStartTime time.Time) ([]*BonusGeneral, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGeneral", ctx, actionNumber, ActionStartTime)
	ret0, _ := ret[0].([]*BonusGeneral)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGeneral indicates an expected call of FindGeneral.
func (mr *MockBonusStorageMockRecorder) FindGeneral(ctx, actionNumber, ActionStartTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGeneral", reflect.TypeOf((*MockBonusStorage)(nil).FindGeneral), ctx, actionNumber, ActionStartTime)
}

// MockFileGenerator is a mock of FileGenerator interface.
type MockFileGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockFileGeneratorMockRecorder
}

// MockFileGeneratorMockRecorder is the mock recorder for MockFileGenerator.
type MockFileGeneratorMockRecorder struct {
	mock *MockFileGenerator
}

// NewMockFileGenerator creates a new mock instance.
func NewMockFileGenerator(ctrl *gomock.Controller) *MockFileGenerator {
	mock := &MockFileGenerator{ctrl: ctrl}
	mock.recorder = &MockFileGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileGenerator) EXPECT() *MockFileGeneratorMockRecorder {
	return m.recorder
}

// GenerateDetailed mocks base method.
func (m *MockFileGenerator) GenerateDetailed(ch <-chan *BonusDetailed) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDetailed", ch)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDetailed indicates an expected call of GenerateDetailed.
func (mr *MockFileGeneratorMockRecorder) GenerateDetailed(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDetailed", reflect.TypeOf((*MockFileGenerator)(nil).GenerateDetailed), ch)
}

// GenerateGeneral mocks base method.
func (m *MockFileGenerator) GenerateGeneral(bonuses []*BonusGeneral) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateGeneral", bonuses)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateGeneral indicates an expected call of GenerateGeneral.
func (mr *MockFileGeneratorMockRecorder) GenerateGeneral(bonuses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateGeneral", reflect.TypeOf((*MockFileGenerator)(nil).GenerateGeneral), bonuses)
}
