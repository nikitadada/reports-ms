// Code generated by MockGen. DO NOT EDIT.
// Source: code.citik.ru/back/report-action/internal/grpcclient/gen/citilink/cmsfiles/file/v1 (interfaces: FileAPIClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	filev1 "code.citik.ru/back/report-action/internal/grpcclient/gen/citilink/cmsfiles/file/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFileAPIClient is a mock of FileAPIClient interface.
type MockFileAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileAPIClientMockRecorder
}

// MockFileAPIClientMockRecorder is the mock recorder for MockFileAPIClient.
type MockFileAPIClientMockRecorder struct {
	mock *MockFileAPIClient
}

// NewMockFileAPIClient creates a new mock instance.
func NewMockFileAPIClient(ctrl *gomock.Controller) *MockFileAPIClient {
	mock := &MockFileAPIClient{ctrl: ctrl}
	mock.recorder = &MockFileAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileAPIClient) EXPECT() *MockFileAPIClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFileAPIClient) Create(arg0 context.Context, arg1 *filev1.CreateRequest, arg2 ...grpc.CallOption) (*filev1.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*filev1.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileAPIClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileAPIClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockFileAPIClient) Delete(arg0 context.Context, arg1 *filev1.DeleteRequest, arg2 ...grpc.CallOption) (*filev1.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*filev1.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFileAPIClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileAPIClient)(nil).Delete), varargs...)
}

// Filter mocks base method.
func (m *MockFileAPIClient) Filter(arg0 context.Context, arg1 *filev1.FilterRequest, arg2 ...grpc.CallOption) (*filev1.FilterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(*filev1.FilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockFileAPIClientMockRecorder) Filter(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockFileAPIClient)(nil).Filter), varargs...)
}

// Get mocks base method.
func (m *MockFileAPIClient) Get(arg0 context.Context, arg1 *filev1.GetRequest, arg2 ...grpc.CallOption) (*filev1.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*filev1.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFileAPIClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFileAPIClient)(nil).Get), varargs...)
}

// Update mocks base method.
func (m *MockFileAPIClient) Update(arg0 context.Context, arg1 *filev1.UpdateRequest, arg2 ...grpc.CallOption) (*filev1.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*filev1.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFileAPIClientMockRecorder) Update(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFileAPIClient)(nil).Update), varargs...)
}

// Upload mocks base method.
func (m *MockFileAPIClient) Upload(arg0 context.Context, arg1 ...grpc.CallOption) (filev1.FileAPI_UploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upload", varargs...)
	ret0, _ := ret[0].(filev1.FileAPI_UploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockFileAPIClientMockRecorder) Upload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockFileAPIClient)(nil).Upload), varargs...)
}
