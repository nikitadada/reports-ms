// Code generated by MockGen. DO NOT EDIT.
// Source: code.citik.ru/back/report-action/internal/distributed_work (interfaces: Inserter)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	distributed_work "code.citik.ru/back/report-action/internal/distributed_work"
	gomock "github.com/golang/mock/gomock"
	version "github.com/hashicorp/go-version"
)

// MockInserter is a mock of Inserter interface.
type MockInserter struct {
	ctrl     *gomock.Controller
	recorder *MockInserterMockRecorder
}

// MockInserterMockRecorder is the mock recorder for MockInserter.
type MockInserterMockRecorder struct {
	mock *MockInserter
}

// NewMockInserter creates a new mock instance.
func NewMockInserter(ctrl *gomock.Controller) *MockInserter {
	mock := &MockInserter{ctrl: ctrl}
	mock.recorder = &MockInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInserter) EXPECT() *MockInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockInserter) Insert(arg0 distributed_work.TaskType, arg1 *version.Version, arg2 []byte, arg3 distributed_work.TaskOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockInserterMockRecorder) Insert(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockInserter)(nil).Insert), arg0, arg1, arg2, arg3)
}
